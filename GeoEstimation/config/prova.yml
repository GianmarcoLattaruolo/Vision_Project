out_dir: data/models/prova/
model_params:
  arch: resnet50 # model architecture from torchvision namespace
  weights: models/base_M/epoch=014-val_loss=18.4833.ckpt # null -> all models are initialized with "ImageNet" weights or path to .ckpt to initialize from pre-trained model
  batch_size: 64
  val_check_interval: 1 # validate after x steps (batches) i.e. batch_size*val_check_interval = n images
  optim:
    # SGD
    params:
      lr: 0.01
      momentum: 0.9
      weight_decay: 0.0001
  scheduler:
    # MultiStepLR
    params:
      gamma: 0.5
      milestones: [2, 4, 6, 8]
  partitionings:
    ptype: default
    shortnames: [coarse, middle, fine]
    files:
      - resources/s2_cells/cells_50_5000.csv
      - resources/s2_cells/cells_50_2000.csv
      - resources/s2_cells/cells_50_1000.csv
  # images stored in chunks
  msgpack_train_dir: resources/images/im2gps
  msgpack_val_dir: resources/images/im2gps3k
  # meta information i.e. coordinates for each image
  train_meta_path: resources/im2gps_places365.csv
  val_meta_path: resources/im2gps3k_places365.csv
  # mapping from image ids in msgpack dataset to target value(s)
  # orient: index -> {"img_id": [t1, t2], ...}
  train_label_mapping: resources/im2gps_places365_mapping_h3.json
  val_label_mapping: resources/im2gps3k_places365_mapping_h3.json
  key_img_id: id # image id name for msgpack dataset
  key_img_encoded: image # image data name for msgpack dataset
  num_workers_per_loader: 6
# paramters for pytorch lightning trainer class
trainer_params:
  gpus: 1
  max_epochs: 10
  #distributed_backend: 'ddp_cpu'
  distributed_backend: null
  fast_dev_run: True
  precision: 16
  reload_dataloaders_every_epoch: true # necessary to shuffle IterableDataset

